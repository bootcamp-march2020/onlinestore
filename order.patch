diff --git a/src/main/java/com/movie/onlinestore/UrlConstants.java b/src/main/java/com/movie/onlinestore/UrlConstants.java
index 87cce75..350e8eb 100644
--- a/src/main/java/com/movie/onlinestore/UrlConstants.java
+++ b/src/main/java/com/movie/onlinestore/UrlConstants.java
@@ -10,6 +10,8 @@ public class UrlConstants {
 
     public static final String URL_PATH_CART_CHECKOUT = "/api/checkout";
 
+    public static final String URL_PATH_PLACE_ORDER = "/api/placeorder";
+
     private UrlConstants(){
         //Utils class object creation forbidden.
     }
diff --git a/src/main/java/com/movie/onlinestore/auth/interceptor/MvcConfigurer.java b/src/main/java/com/movie/onlinestore/auth/interceptor/MvcConfigurer.java
index a22474b..092ad18 100644
--- a/src/main/java/com/movie/onlinestore/auth/interceptor/MvcConfigurer.java
+++ b/src/main/java/com/movie/onlinestore/auth/interceptor/MvcConfigurer.java
@@ -16,6 +16,6 @@ public class MvcConfigurer implements WebMvcConfigurer {
 
     @Override
     public void addInterceptors(InterceptorRegistry registry) {
-        registry.addInterceptor(loginInterceptor).excludePathPatterns("/public/**");
+       // registry.addInterceptor(loginInterceptor).excludePathPatterns("/public/**");
     }
 }
diff --git a/src/main/java/com/movie/onlinestore/controllers/CartController.java b/src/main/java/com/movie/onlinestore/controllers/CartController.java
index 0f12b1c..5c674a4 100644
--- a/src/main/java/com/movie/onlinestore/controllers/CartController.java
+++ b/src/main/java/com/movie/onlinestore/controllers/CartController.java
@@ -30,6 +30,6 @@ public class CartController {
             Integer numberOfDays = (Integer) object.get("numberOfDays");
             movieRecord.ifPresent(movie -> cart.addMovieToCart(movie, numberOfDays));
         }
-        return new ResponseEntity<>(Response.success(cart), HttpStatus.ACCEPTED);
+        return new ResponseEntity<>(Response.success(cart), HttpStatus.OK);
     }
 }
diff --git a/src/main/java/com/movie/onlinestore/controllers/MovieController.java b/src/main/java/com/movie/onlinestore/controllers/MovieController.java
index f50d826..5a1d601 100644
--- a/src/main/java/com/movie/onlinestore/controllers/MovieController.java
+++ b/src/main/java/com/movie/onlinestore/controllers/MovieController.java
@@ -30,6 +30,6 @@ public class MovieController {
         List<Movie> movies = movieInventories.stream()
                 .map(e->e.getMovie())
                 .collect(Collectors.toList());
-        return new ResponseEntity<>(Response.success(movies), HttpStatus.ACCEPTED);
+        return new ResponseEntity<>(Response.success(movies), HttpStatus.OK);
     }
 }
diff --git a/src/main/java/com/movie/onlinestore/controllers/OrderController.java b/src/main/java/com/movie/onlinestore/controllers/OrderController.java
index a4167dc..de09be9 100644
--- a/src/main/java/com/movie/onlinestore/controllers/OrderController.java
+++ b/src/main/java/com/movie/onlinestore/controllers/OrderController.java
@@ -1,4 +1,52 @@
 package com.movie.onlinestore.controllers;
 
+
+import com.movie.onlinestore.UrlConstants;
+import com.movie.onlinestore.model.*;
+import com.movie.onlinestore.repository.MovieRepository;
+import com.movie.onlinestore.repository.OrderRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.*;
+
+@RestController
 public class OrderController {
+    @Autowired
+    private OrderRepository orderRepository;
+
+    @Autowired
+    private MovieRepository movieRepository;
+
+    @GetMapping(UrlConstants.URL_PATH_PLACE_ORDER)
+    @ResponseBody
+    public ResponseEntity<Response<String>> placeOrder(@RequestBody PlaceOrderRequest placeOrderRequest) {
+        System.out.println(placeOrderRequest.getAddress());
+
+        Order order = createOrder(placeOrderRequest.getAddress());
+        StringBuilder missedMovies = new StringBuilder();
+        Cart cart = new Cart();
+        List<OrderItem> orderItems = new ArrayList<>();
+
+        for (PlaceOrderRequest.CartItem cartItem : placeOrderRequest.getCartItemList()) {
+            Optional<Movie> movieRecord = movieRepository.findById(cartItem.getMovieId());
+            Integer numberOfDays = cartItem.getNumberOfDays();
+
+            if (movieRecord.isPresent()) {
+            } else {
+                missedMovies.append(cartItem.getMovieName());
+            }
+        }
+
+        return new ResponseEntity<>(Response.success("Success"), HttpStatus.OK);
+    }
+
+    public Order createOrder(String address){
+        return orderRepository.save(new Order(1L, address,new Date()));
+    }
 }
diff --git a/src/main/java/com/movie/onlinestore/model/Order.java b/src/main/java/com/movie/onlinestore/model/Order.java
index 7d448b7..76bc5e6 100644
--- a/src/main/java/com/movie/onlinestore/model/Order.java
+++ b/src/main/java/com/movie/onlinestore/model/Order.java
@@ -1,4 +1,88 @@
 package com.movie.onlinestore.model;
 
+
+import lombok.AllArgsConstructor;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import java.util.Date;
+import java.util.List;
+
+@Entity
+@AllArgsConstructor
+@NoArgsConstructor
+@EqualsAndHashCode
+@Table(name = "order")
 public class Order {
+    @Id
+    @GeneratedValue(strategy= GenerationType.IDENTITY)
+    private Long oid;
+
+    @OneToMany
+    @JoinColumn(name = "order_id")
+    private List<OrderItem> orderItems;
+
+    @Column(name = "customer_id")
+    private Long customerId;
+
+    @Column(name = "address")
+    private String address;
+
+    @Column(name = "total_cost")
+    private Double totalCost;
+
+    @Column(name = "order_date")
+    private Date orderDate;
+
+
+
+    public Order() {
+    }
+
+    public Order (  Long customerId, String address, Date orderDate) {
+        this.customerId = customerId;
+        this.address = address;
+        this.orderDate = orderDate;
+    }
+
+    public Long getOid() {
+        return oid;
+    }
+
+    public void setOid(Long oid) {
+        this.oid = oid;
+    }
+
+    public Long getCustomerId() {
+        return customerId;
+    }
+
+    public void setCustomerId(Long customerId) {
+        this.customerId = customerId;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public Double getTotalCost() {
+        return totalCost;
+    }
+
+    public void setTotalCost(Double totalCost) {
+        this.totalCost = totalCost;
+    }
+
+    public Date getOrderDate() {
+        return orderDate;
+    }
+
+    public void setOrderDate(Date orderDate) {
+        this.orderDate = orderDate;
+    }
 }
diff --git a/src/main/java/com/movie/onlinestore/model/OrderItem.java b/src/main/java/com/movie/onlinestore/model/OrderItem.java
index cc33d65..348044e 100644
--- a/src/main/java/com/movie/onlinestore/model/OrderItem.java
+++ b/src/main/java/com/movie/onlinestore/model/OrderItem.java
@@ -1,4 +1,124 @@
 package com.movie.onlinestore.model;
 
+
+import lombok.AllArgsConstructor;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import javax.persistence.criteria.CriteriaBuilder;
+
+@Entity
+@AllArgsConstructor
+@NoArgsConstructor
+@EqualsAndHashCode
+@Table(name = "order")
+
 public class OrderItem {
+
+    @Id
+    @GeneratedValue(strategy= GenerationType.IDENTITY)
+    private Long orderItemId;
+
+    @Column (name = "order_id")
+    private Long orderId;
+
+    @OneToOne
+    @JoinColumn(name = "movie_id")
+    private Movie movie;
+
+    @Column(name = "number_of_days")
+    private Integer numberOfDays;
+
+    @Column(name = "initial_cost")
+    private Double initialCost;
+
+    @Column(name = "cut_off_days")
+    private  Integer cutOffDays;
+
+    @Column(name = "additional_cost")
+    private Double additionalCost;
+
+    @Column(name = "total_cost")
+    private Double totalCost;
+
+    public OrderItem() {
+    }
+
+    public OrderItem( Long orderId, Movie movie, Integer numberOfDays,
+                     Double initialCost, Double additionalCost, Integer cutOffDays, Double totalCost) {
+
+        this.orderId = orderId;
+        this.movie = movie;
+        this.numberOfDays = numberOfDays;
+        this.additionalCost = additionalCost;
+        this.initialCost = initialCost;
+        this.cutOffDays = cutOffDays;
+        this.totalCost = totalCost;
+    }
+
+
+    public Long getOrderItemId() {
+        return orderItemId;
+    }
+
+    public void setOrderItemId(Long orderItemId) {
+        this.orderItemId = orderItemId;
+    }
+
+    public Long getOrderId() {
+        return orderId;
+    }
+
+    public void setOrderId(Long orderId) {
+        this.orderId = orderId;
+    }
+
+    public Movie getMovie() {
+        return movie;
+    }
+
+    public void setMovie(Movie movie) {
+        this.movie = movie;
+    }
+
+    public Integer getNumberOfDays() {
+        return numberOfDays;
+    }
+
+    public void setNumberOfDays(Integer numberOfDays) {
+        this.numberOfDays = numberOfDays;
+    }
+
+    public Double getInitialCost() {
+        return initialCost;
+    }
+
+    public void setInitialCost(Double initialCost) {
+        this.initialCost = initialCost;
+    }
+
+    public Integer getCutOffDays() {
+        return cutOffDays;
+    }
+
+    public void setCutOffDays(Integer cutOffDays) {
+        this.cutOffDays = cutOffDays;
+    }
+
+    public Double getAdditionalCost() {
+        return additionalCost;
+    }
+
+    public void setAdditionalCost(Double additionalCost) {
+        this.additionalCost = additionalCost;
+    }
+
+    public Double getTotalCost() {
+        return totalCost;
+    }
+
+    public void setTotalCost(Double totalCost) {
+        this.totalCost = totalCost;
+    }
 }
diff --git a/src/main/java/com/movie/onlinestore/model/PlaceOrderRequest.java b/src/main/java/com/movie/onlinestore/model/PlaceOrderRequest.java
index 6ba7ddb..0f07b34 100644
--- a/src/main/java/com/movie/onlinestore/model/PlaceOrderRequest.java
+++ b/src/main/java/com/movie/onlinestore/model/PlaceOrderRequest.java
@@ -1,4 +1,72 @@
 package com.movie.onlinestore.model;
 
+import java.util.List;
+
 public class PlaceOrderRequest {
+    private List<CartItem> cartItemList;
+    private String address;
+
+    public  PlaceOrderRequest() {
+
+    }
+    public PlaceOrderRequest(List<CartItem> cartItemList, String address) {
+        this.cartItemList = cartItemList;
+        this.address = address;
+    }
+
+    public List<CartItem> getCartItemList() {
+        return cartItemList;
+    }
+
+    public void setCartItemList(List<CartItem> cartItemList) {
+        this.cartItemList = cartItemList;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public static class CartItem {
+        private Long movieId;
+        private String movieName;
+        private Integer numberOfDays;
+
+        public CartItem() {
+
+        }
+
+        public CartItem(Long movieId, String movieName, Integer numberOfDays) {
+            this.movieId = movieId;
+            this.movieName = movieName;
+            this.numberOfDays = numberOfDays;
+        }
+
+        public Long getMovieId() {
+            return movieId;
+        }
+
+        public void setMovieId(Long movieId) {
+            this.movieId = movieId;
+        }
+
+        public String getMovieName() {
+            return movieName;
+        }
+
+        public void setMovieName(String movieName) {
+            this.movieName = movieName;
+        }
+
+        public Integer getNumberOfDays() {
+            return numberOfDays;
+        }
+
+        public void setNumberOfDays(Integer numberOfDays) {
+            this.numberOfDays = numberOfDays;
+        }
+    }
 }
diff --git a/src/main/java/com/movie/onlinestore/repository/OrderRepository.java b/src/main/java/com/movie/onlinestore/repository/OrderRepository.java
index 10b2bad..85a4348 100644
--- a/src/main/java/com/movie/onlinestore/repository/OrderRepository.java
+++ b/src/main/java/com/movie/onlinestore/repository/OrderRepository.java
@@ -1,4 +1,7 @@
 package com.movie.onlinestore.repository;
 
-public interface OrderRepository {
+import com.movie.onlinestore.model.Order;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface OrderRepository extends JpaRepository<Order, Long> {
 }
diff --git a/src/test/java/com/movie/onlinestore/MovieControllerIntegrationTest.java b/src/test/java/com/movie/onlinestore/MovieControllerIntegrationTest.java
index 5e70ac5..0c7fde6 100644
--- a/src/test/java/com/movie/onlinestore/MovieControllerIntegrationTest.java
+++ b/src/test/java/com/movie/onlinestore/MovieControllerIntegrationTest.java
@@ -34,7 +34,7 @@ public class MovieControllerIntegrationTest {
         MovieController movieController = new MovieController();
 
         mockMvc.perform(MockMvcRequestBuilders.get("/api/movies").contentType(MediaType.TEXT_PLAIN))
-                .andExpect(status().isAccepted())
+                .andExpect(status().isOk())
                 .andExpect(content().json(  "{\"statusCode\":200,\"message\":\"Success\",\"payload\":[]}"));
     }
 }
\ No newline at end of file
diff --git a/src/test/java/com/movie/onlinestore/OrderControllerTest.java b/src/test/java/com/movie/onlinestore/OrderControllerTest.java
index 7548c86..411176e 100644
--- a/src/test/java/com/movie/onlinestore/OrderControllerTest.java
+++ b/src/test/java/com/movie/onlinestore/OrderControllerTest.java
@@ -1,4 +1,28 @@
-package com.movie.onlinestore.auth.interceptor;
+package com.movie.onlinestore;
 
+import com.movie.onlinestore.controllers.OrderController;
+import com.movie.onlinestore.repository.OrderRepository;
+import org.junit.jupiter.api.Test;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.springframework.boot.test.context.SpringBootTest;
+
+import static org.junit.Assert.assertEquals;
+
+@SpringBootTest
 public class OrderControllerTest {
+    @InjectMocks
+    OrderController orderController;
+
+    @Mock
+    OrderRepository orderRepository;
+//
+//    @Test
+//    public void testOrderConfirmation () {
+//        String expected = "Success";
+//
+//        String response = orderController.placeOrder();
+//
+//        assertEquals(expected, response);
+//    }
 }
